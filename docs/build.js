import { readdirSync, writeFileSync } from "fs";

console.log(`
█████████████████████████████████
█░░░░░░░░░░░░░░███░░░░░░██░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀░░██░░▄▀░░█
█░░▄▀░░░░░░▄▀░░███░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░███░░▄▀░░██░░▄▀░░█
█░░▄▀░░░░░░▄▀░░███░░▄▀░░░░░░▄▀░░█
█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░░░░░▄▀░░███░░▄▀░░░░░░▄▀░░█
█░░▄▀░░██░░▄▀░░███░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░███░░▄▀░░██░░▄▀░░█
█░░▄▀░░██░░▄▀░░███░░▄▀░░██░░▄▀░░█
█░░░░░░██░░░░░░███░░░░░░██░░░░░░█
█████████████████████████████████
█░░░░░░░░░░░░░░███░░░░░░░░░░░░░░█
█░░▄▀▄▀▄▀▄▀▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░░░░░▄▀░░███░░▄▀░░░░░░░░░░█
█░░▄▀░░██░░▄▀░░███░░▄▀░░█████████
█░░▄▀░░██░░▄▀░░███░░▄▀░░░░░░░░░░█
█░░▄▀░░██░░▄▀░░███░░▄▀▄▀▄▀▄▀▄▀░░█
█░░▄▀░░██░░▄▀░░███░░░░░░░░░░▄▀░░█
█░░▄▀░░██░░▄▀░░███████████░░▄▀░░█
█░░▄▀░░░░░░▄▀░░░░█░░░░░░░░░░▄▀░░█
█░░▄▀▄▀▄▀▄▀▄▀▄▀░░█░░▄▀▄▀▄▀▄▀▄▀░░█
█░░░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█
█████████████████████████████████`);

for (let i = 0; i < 1000000000; i++) {
  i++;
}

console.log(`
██████╗░░█████╗░██╗░░░██╗████████╗███████╗░██████╗   ███╗░░░███╗░█████╗░██╗░░██╗███████╗██████╗░
██╔══██╗██╔══██╗██║░░░██║╚══██╔══╝██╔════╝██╔════╝   ████╗░████║██╔══██╗██║░██╔╝██╔════╝██╔══██╗
██████╔╝██║░░██║██║░░░██║░░░██║░░░█████╗░░╚█████╗░   ██╔████╔██║███████║█████═╝░█████╗░░██████╔╝
██╔══██╗██║░░██║██║░░░██║░░░██║░░░██╔══╝░░░╚═══██╗   ██║╚██╔╝██║██╔══██║██╔═██╗░██╔══╝░░██╔══██╗
██║░░██║╚█████╔╝╚██████╔╝░░░██║░░░███████╗██████╔╝   ██║░╚═╝░██║██║░░██║██║░╚██╗███████╗██║░░██║
╚═╝░░╚═╝░╚════╝░░╚═════╝░░░░╚═╝░░░╚══════╝╚═════╝░   ╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝`);

for (let i = 0; i < 1000000000; i++) {
  i++;
}

const data = readdirSync("./src/ts");

/**
 * @type {string[]}
 */
let routes = [];
let code = [
  "export default async function Resolve(): Promise<JSX.Element> {",
  "   const page = document.location.pathname.toLowerCase();",
  "",
  '   if (page == "/") {',
  '      return (await import("../ts/Home/index.tsx")).default();',
  "   }"
];

data.forEach((folder) => {
  if (folder != "index.ts") {
    const folderParsed = folder.toLowerCase();

    routes.push("/" + folderParsed);
    code.push(
      ...[
        `   if (page == "/${folderParsed}") {`,
        `      return (await import("../ts/${folder}/index.tsx")).default();`,
        `   }`,
      ],
    );
  }
});

code.push("");
code.push("   window.location.href = `${window.location.origin}/error?type=404`");
code.push("   return (await import(\"../ts/Error/index.tsx\")).default();");

code.push("}");

routes = routes.filter((r) => r !== "/error");
routes = routes.sort((a, b) => {
  if (a == "/home") {
    return -1;
  } else if (b == "/home") {
    return 1;
  } else if (a == "/about") {
    return 1;
  } else if (b == "/about") {
    return -1;
  } else {
    return 0;
  }
});

writeFileSync("./src/router/pages.json", JSON.stringify(routes, 4));
writeFileSync("./src/router/resolve.tsx", code.join("\n"));

console.log(`Routes: ${routes.length}`);

console.log(`
                                        ███████████████████████████████
                                        █░░░░░░░░░░░░░░█░░░░░░░░░░░░░░█
                                        █░░          ░░█░░          ░░█
                                        █░░░░░░  ░░░░░░█░░  ░░░░░░░░░░█
                                        █████░░  ░░█████░░  ░░█████████
                                        █████░░  ░░█████░░  ░░░░░░░░░░█
                                        █████░░  ░░█████░░          ░░█
                                        █████░░  ░░█████░░░░░░░░░░  ░░█
                                        █████░░  ░░█████████████░░  ░░█
                                        █████░░  ░░█████░░░░░░░░░░  ░░█
                                        █████░░  ░░█████░░          ░░█
                                        █████░░░░░░█████░░░░░░░░░░░░░░█
                                        ███████████████████████████████`);
